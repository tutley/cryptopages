consumes:
- application/json
definitions:
  CreateUserPayload:
    example:
      available: true
      coins:
        bcc: false
        btc: true
        eth: false
        ltc: false
        neo: true
        other:
          name: Perferendis totam voluptatibus facilis magni ut.
        xlm: true
        xrp: false
      email:
        makePublic: true
        value: me@someplace.com
      jobCategory: legal
      jobDescription: I'm looking for small remote projects
      location:
        makePublic: true
        value: Charleston, SC, USA
      name: John Smith
      password: somethingreallyhardtoguess123%$!@#
      skills:
      - Cupiditate praesentium.
      username: scubasteve
    properties:
      available:
        description: Is this user available to provide work
        example: true
        type: boolean
      coins:
        description: The coins this user will accept as payment
        example:
          bcc: false
          btc: true
          eth: false
          ltc: false
          neo: true
          other:
            name: Perferendis totam voluptatibus facilis magni ut.
          xlm: true
          xrp: false
        properties:
          bcc:
            description: Accepts Bitcoin Cash
            example: false
            type: boolean
          btc:
            description: Accepts Bitcoin
            example: true
            type: boolean
          eth:
            description: Accepts Ethereum
            example: false
            type: boolean
          ltc:
            description: Accepts Litecoin
            example: false
            type: boolean
          neo:
            description: Accepts Neo
            example: true
            type: boolean
          other:
            description: Accepts some other coin
            example:
              name: Perferendis totam voluptatibus facilis magni ut.
            properties:
              name:
                description: Name of the other coin accepted
                example: Perferendis totam voluptatibus facilis magni ut.
                type: string
            type: object
          xlm:
            description: Accepts Lumen
            example: true
            type: boolean
          xrp:
            description: Accepts Ripple
            example: false
            type: boolean
        type: object
      email:
        description: The user's email address
        example:
          makePublic: true
          value: me@someplace.com
        properties:
          makePublic:
            description: Should the email address be shown to others
            example: true
            type: boolean
          value:
            description: the email address
            example: me@someplace.com
            format: email
            minLength: 5
            type: string
        type: object
      jobCategory:
        enum:
        - hardware
        - software
        - writing
        - legal
        - labor
        - automotive
        - services
        - others
        example: legal
        type: string
      jobDescription:
        example: I'm looking for small remote projects
        type: string
      location:
        description: the user's location geographically
        example:
          makePublic: true
          value: Charleston, SC, USA
        properties:
          makePublic:
            description: Should the location be shown to others
            example: true
            type: boolean
          value:
            description: the location
            example: Charleston, SC, USA
            minLength: 2
            type: string
        type: object
      name:
        description: The user's full name
        example: John Smith
        minLength: 2
        type: string
      password:
        description: A password (only exposed to user)
        example: somethingreallyhardtoguess123%$!@#
        minLength: 8
        type: string
      skills:
        example:
        - Cupiditate praesentium.
        items:
          example: Cupiditate praesentium.
          type: string
        type: array
      username:
        description: The unique username for this person
        example: scubasteve
        minLength: 2
        type: string
    required:
    - name
    - username
    - password
    title: CreateUserPayload
    type: object
  CryptopagesUser:
    description: A cryptopages user (default view)
    example:
      available: true
      coins:
        bcc: false
        btc: true
        eth: false
        ltc: false
        neo: true
        other:
          name: Perferendis totam voluptatibus facilis magni ut.
        xlm: true
        xrp: false
      email:
        makePublic: true
        value: me@someplace.com
      href: /users/scubasteve
      jobCategory: services
      jobDescription: I'm looking for small remote projects
      location:
        makePublic: true
        value: Charleston, SC, USA
      name: John Smith
      password: somethingreallyhardtoguess123%$!@#
      skills:
      - Cupiditate praesentium.
      - Cupiditate praesentium.
      username: scubasteve
    properties:
      available:
        description: Is this user available to provide work
        example: true
        type: boolean
      coins:
        description: The coins this user will accept as payment
        example:
          bcc: false
          btc: true
          eth: false
          ltc: false
          neo: true
          other:
            name: Perferendis totam voluptatibus facilis magni ut.
          xlm: true
          xrp: false
        properties:
          bcc:
            description: Accepts Bitcoin Cash
            example: false
            type: boolean
          btc:
            description: Accepts Bitcoin
            example: true
            type: boolean
          eth:
            description: Accepts Ethereum
            example: false
            type: boolean
          ltc:
            description: Accepts Litecoin
            example: false
            type: boolean
          neo:
            description: Accepts Neo
            example: true
            type: boolean
          other:
            description: Accepts some other coin
            example:
              name: Perferendis totam voluptatibus facilis magni ut.
            properties:
              name:
                description: Name of the other coin accepted
                example: Perferendis totam voluptatibus facilis magni ut.
                type: string
            type: object
          xlm:
            description: Accepts Lumen
            example: true
            type: boolean
          xrp:
            description: Accepts Ripple
            example: false
            type: boolean
        type: object
      email:
        description: The user's email address
        example:
          makePublic: true
          value: me@someplace.com
        properties:
          makePublic:
            description: Should the email address be shown to others
            example: true
            type: boolean
          value:
            description: the email address
            example: me@someplace.com
            format: email
            minLength: 5
            type: string
        type: object
      href:
        description: API href for making requests on the user
        example: /users/scubasteve
        type: string
      jobCategory:
        enum:
        - hardware
        - software
        - writing
        - legal
        - labor
        - automotive
        - services
        - others
        example: services
        type: string
      jobDescription:
        example: I'm looking for small remote projects
        type: string
      location:
        description: the user's location geographically
        example:
          makePublic: true
          value: Charleston, SC, USA
        properties:
          makePublic:
            description: Should the location be shown to others
            example: true
            type: boolean
          value:
            description: the location
            example: Charleston, SC, USA
            minLength: 2
            type: string
        type: object
      name:
        description: The user's full name
        example: John Smith
        minLength: 2
        type: string
      password:
        description: A password (only exposed to user)
        example: somethingreallyhardtoguess123%$!@#
        minLength: 8
        type: string
      skills:
        example:
        - Cupiditate praesentium.
        - Cupiditate praesentium.
        items:
          example: Cupiditate praesentium.
          type: string
        type: array
      username:
        description: The unique username for this person
        example: scubasteve
        minLength: 2
        type: string
    required:
    - username
    - href
    - name
    - jobCategory
    title: 'Mediatype identifier: application/vnd.cryptopages.user; view=default'
    type: object
  CryptopagesUserCollection:
    description: CryptopagesUserCollection is the media type for an array of CryptopagesUser
      (default view)
    example:
    - available: true
      coins:
        bcc: false
        btc: true
        eth: false
        ltc: false
        neo: true
        other:
          name: Perferendis totam voluptatibus facilis magni ut.
        xlm: true
        xrp: false
      email:
        makePublic: true
        value: me@someplace.com
      href: /users/scubasteve
      jobCategory: services
      jobDescription: I'm looking for small remote projects
      location:
        makePublic: true
        value: Charleston, SC, USA
      name: John Smith
      password: somethingreallyhardtoguess123%$!@#
      skills:
      - Cupiditate praesentium.
      - Cupiditate praesentium.
      username: scubasteve
    - available: true
      coins:
        bcc: false
        btc: true
        eth: false
        ltc: false
        neo: true
        other:
          name: Perferendis totam voluptatibus facilis magni ut.
        xlm: true
        xrp: false
      email:
        makePublic: true
        value: me@someplace.com
      href: /users/scubasteve
      jobCategory: services
      jobDescription: I'm looking for small remote projects
      location:
        makePublic: true
        value: Charleston, SC, USA
      name: John Smith
      password: somethingreallyhardtoguess123%$!@#
      skills:
      - Cupiditate praesentium.
      - Cupiditate praesentium.
      username: scubasteve
    items:
      $ref: '#/definitions/CryptopagesUser'
    title: 'Mediatype identifier: application/vnd.cryptopages.user; type=collection;
      view=default'
    type: array
  UserPayload:
    example:
      available: true
      coins:
        bcc: false
        btc: true
        eth: false
        ltc: false
        neo: true
        other:
          name: Perferendis totam voluptatibus facilis magni ut.
        xlm: true
        xrp: false
      email:
        makePublic: true
        value: me@someplace.com
      jobCategory: legal
      jobDescription: I'm looking for small remote projects
      location:
        makePublic: true
        value: Charleston, SC, USA
      name: John Smith
      password: somethingreallyhardtoguess123%$!@#
      skills:
      - Cupiditate praesentium.
      username: scubasteve
    properties:
      available:
        description: Is this user available to provide work
        example: true
        type: boolean
      coins:
        description: The coins this user will accept as payment
        example:
          bcc: false
          btc: true
          eth: false
          ltc: false
          neo: true
          other:
            name: Perferendis totam voluptatibus facilis magni ut.
          xlm: true
          xrp: false
        properties:
          bcc:
            description: Accepts Bitcoin Cash
            example: false
            type: boolean
          btc:
            description: Accepts Bitcoin
            example: true
            type: boolean
          eth:
            description: Accepts Ethereum
            example: false
            type: boolean
          ltc:
            description: Accepts Litecoin
            example: false
            type: boolean
          neo:
            description: Accepts Neo
            example: true
            type: boolean
          other:
            description: Accepts some other coin
            example:
              name: Perferendis totam voluptatibus facilis magni ut.
            properties:
              name:
                description: Name of the other coin accepted
                example: Perferendis totam voluptatibus facilis magni ut.
                type: string
            type: object
          xlm:
            description: Accepts Lumen
            example: true
            type: boolean
          xrp:
            description: Accepts Ripple
            example: false
            type: boolean
        type: object
      email:
        description: The user's email address
        example:
          makePublic: true
          value: me@someplace.com
        properties:
          makePublic:
            description: Should the email address be shown to others
            example: true
            type: boolean
          value:
            description: the email address
            example: me@someplace.com
            format: email
            minLength: 5
            type: string
        type: object
      jobCategory:
        enum:
        - hardware
        - software
        - writing
        - legal
        - labor
        - automotive
        - services
        - others
        example: legal
        type: string
      jobDescription:
        example: I'm looking for small remote projects
        type: string
      location:
        description: the user's location geographically
        example:
          makePublic: true
          value: Charleston, SC, USA
        properties:
          makePublic:
            description: Should the location be shown to others
            example: true
            type: boolean
          value:
            description: the location
            example: Charleston, SC, USA
            minLength: 2
            type: string
        type: object
      name:
        description: The user's full name
        example: John Smith
        minLength: 2
        type: string
      password:
        description: A password (only exposed to user)
        example: somethingreallyhardtoguess123%$!@#
        minLength: 8
        type: string
      skills:
        example:
        - Cupiditate praesentium.
        items:
          example: Cupiditate praesentium.
          type: string
        type: array
      username:
        description: The unique username for this person
        example: scubasteve
        minLength: 2
        type: string
    title: UserPayload
    type: object
  error:
    description: Error response media type (default view)
    example:
      code: invalid_value
      detail: Value of ID must be an integer
      id: 3F1FKVRR
      meta:
        timestamp: 1.458609e+09
      status: "400"
    properties:
      code:
        description: an application-specific error code, expressed as a string value.
        example: invalid_value
        type: string
      detail:
        description: a human-readable explanation specific to this occurrence of the
          problem.
        example: Value of ID must be an integer
        type: string
      id:
        description: a unique identifier for this particular occurrence of the problem.
        example: 3F1FKVRR
        type: string
      meta:
        additionalProperties: true
        description: a meta object containing non-standard meta-information about
          the error.
        example:
          timestamp: 1.458609e+09
        type: object
      status:
        description: the HTTP status code applicable to this problem, expressed as
          a string value.
        example: "400"
        type: string
    title: 'Mediatype identifier: application/vnd.goa.error; view=default'
    type: object
host: localhost:8010
info:
  contact:
    email: tom@tomutley.com
    name: Tom Utley
    url: https://tomutley.com
  description: A directory of crypto enthusiasts offering their services. Written
    in goa.
  title: CryptoPages - Do business with fellow crypto enthusiasts.
  version: ""
paths:
  /_ah/health:
    get:
      description: Perform health check.
      operationId: health#health
      produces:
      - text/plain
      responses:
        "200":
          description: OK
      schemes:
      - http
      security:
      - jwt: []
      summary: health health
      tags:
      - health
  /js/{filepath}:
    get:
      operationId: js#/js/*filepath
      parameters:
      - description: Relative file path
        in: path
        name: filepath
        required: true
        type: string
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
        "404":
          description: File not found
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      security:
      - jwt: []
      summary: Download public/js
  /jwt/signin:
    post:
      description: Creates a valid JWT
      operationId: jwt#signin
      responses:
        "204":
          description: No Content
          headers:
            Authorization:
              description: Generated JWT
              type: string
        "401":
          description: Unauthorized
      schemes:
      - http
      security:
      - SigninBasicAuth: []
      summary: signin jwt
      tags:
      - jwt
  /swagger.json:
    get:
      operationId: swagger#/swagger.json
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
      schemes:
      - http
      security:
      - jwt: []
      summary: Download public/swagger/swagger.json
  /ui:
    get:
      operationId: public#/ui
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
      schemes:
      - http
      security:
      - jwt: []
      summary: Download public/html/index.html
  /user:
    get:
      description: |-
        Search users based on different criteria

        Required security scopes:
          * `api:access`
      operationId: user#search
      parameters:
      - description: Search by crypto coins accepted (abbreviated)
        in: query
        name: coins
        required: false
        type: string
      - description: Search by job Category
        enum:
        - hardware
        - software
        - writing
        - legal
        - labor
        - automotive
        - services
        - others
        in: query
        name: jobCategory
        required: false
        type: string
      - description: Search by Skills
        in: query
        name: skills
        required: false
        type: string
      produces:
      - application/vnd.cryptopages.user; type=collection
      - application/vnd.goa.error
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/CryptopagesUserCollection'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
      schemes:
      - http
      security:
      - jwt:
        - api:access
      summary: search user
      tags:
      - user
    post:
      description: Register new user
      operationId: user#create
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/CreateUserPayload'
      produces:
      - application/vnd.goa.error
      responses:
        "201":
          description: Resource created
          headers:
            Location:
              description: href to created resource
              pattern: ^/user/[0-9]+$
              type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
      schemes:
      - http
      summary: create user
      tags:
      - user
  /user/{username}:
    delete:
      description: |-
        Required security scopes:
          * `api:access`
      operationId: user#delete
      parameters:
      - description: username
        in: path
        minLength: 2
        name: username
        required: true
        type: string
      produces:
      - application/vnd.goa.error
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
      schemes:
      - http
      security:
      - jwt:
        - api:access
      summary: delete user
      tags:
      - user
    get:
      description: |-
        Get user by username

        Required security scopes:
          * `api:access`
      operationId: user#show
      parameters:
      - description: username
        in: path
        minLength: 1
        name: username
        required: true
        type: string
      produces:
      - application/vnd.cryptopages.user
      - application/vnd.goa.error
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/CryptopagesUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
      schemes:
      - http
      security:
      - jwt:
        - api:access
      summary: show user
      tags:
      - user
    patch:
      description: |-
        Required security scopes:
          * `api:access`
      operationId: user#update
      parameters:
      - description: The unique username for this person
        in: path
        minLength: 2
        name: username
        required: true
        type: string
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UserPayload'
      produces:
      - application/vnd.goa.error
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
      schemes:
      - http
      security:
      - jwt:
        - api:access
      summary: update user
      tags:
      - user
produces:
- application/json
responses:
  NoContent:
    description: No Content
  NotFound:
    description: Not Found
  OK:
    description: OK
    schema:
      $ref: '#/definitions/CryptopagesUser'
  Unauthorized:
    description: Unauthorized
schemes:
- http
securityDefinitions:
  SigninBasicAuth:
    type: basic
  jwt:
    description: |2-


      **Security Scopes**:
        * `api:access`: API access
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
